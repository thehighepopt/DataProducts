library()
install.packages("httr","XML","rvest","magrittr","plyr","stringr")
brats <- read.csv('C:/Users/stephen.p.duffy/Documents/GitHub/New Folder/Brats.csv')
spices <- data.frame(arrange(count(brats$material),desc(freq)))
names(spices) <- c("material","count")
library(plyr)
library(dplyr)
spices <- data.frame(arrange(count(brats$material),desc(freq)))
names(spices) <- c("material","count")
brats$material <- as.character(brats$material)
brats$amount <- as.numeric(brats$amount)
spices <- data.frame(arrange(count(brats$material),desc(freq)))
names(spices) <- c("material","count")
spices <- data.frame(arrange(count(brats$material),desc(freq)))
count(brats$material
)
spices <- brats %>% group_by(material) %>% data.frame(arrange(count(material),desc(freq)))
spices <- brats %>% group_by(material)
data.frame(arrange(count(material),desc(freq)))
data.frame(arrange(count(spices$material),desc(freq)))
group_by(brats,material)
spices <- data.frame(arrange(count(brats$material),desc(freq)))
gb <- group_by(brats,material)
spices <- data.frame(arrange(count(gb$material),desc(freq)))
spices <- data.frame(arrange(count(gb$recipe),desc(freq)))
spices <- data.frame(arrange(count(gb),desc(freq)))
spices <- data.frame(arrange(count(gb$recipe),desc(freq)))
brats <- read.csv('C:/Users/stephen.p.duffy/Documents/GitHub/New Folder/Brats.csv')
gb <- group_by(brats,material)
batting_tbl <- tbl_df(Batting)
if (require("Lahman")) {
batting_tbl <- tbl_df(Batting)
tally(group_by(batting_tbl, yearID))
tally(group_by(batting_tbl, yearID), sort = TRUE)
# Multiple tallys progressively roll up the groups
plays_by_year <- tally(group_by(batting_tbl, playerID, stint), sort = TRUE)
tally(plays_by_year, sort = TRUE)
tally(tally(plays_by_year))
# This looks a little nicer if you use the infix %>% operator
batting_tbl %>% group_by(playerID) %>% tally(sort = TRUE)
# count is even more succinct - it also does the grouping for you
batting_tbl %>% count(playerID)
batting_tbl %>% count(playerID, wt = G)
batting_tbl %>% count(playerID, wt = G, sort = TRUE)
}
spices <- data.frame(arrange(tally(gb$recipe),desc(freq)))
spices <- data.frame(arrange(tally(gb$material),desc(freq)))
View(gb)
brats$material <- as.character(brats$material)
spices <- data.frame(tally(gb$material,sort = TRUE))
gb <- group_by(brats,material)
spices <- data.frame(tally(gb$material,sort = TRUE))
gb <- tally(group_by(brats,material) )
View(gb)
spices <- data.frame(tally(group_by(brats,material),sort = TRUE )
)
rm(gb)
brats$material <- as.character(brats$material)
brats$amount <- as.numeric(brats$amount)
spices <- data.frame(tally(group_by(brats,material),sort = TRUE )
)
names(spices) <- c("material","count")
brats$grams <- ifelse(brats[,3] == "tsp", brats$grams <- brats$amount * 4.93,
ifelse(brats[,3] == "tbsp", brats$grams <- brats$amount * 15,
ifelse(brats[,3] == "lbs", brats$grams <- brats$amount * 453.6,
ifelse(brats[,3] == "g", brats$grams <- brats$amount * 1, NA))))
bymat <- brats %>% group_by(material) %>% summarise_each(funs(mean),grams)
spices <- join(spices,bymat,by="material")
View(spices)
View(bymat)
is.na(bymat) <- 0
is.na(bymat$grams) <- 0
View(bymat)
bymat[(is.na(bymat)] <- 0
bymat[is.na(bymat)] <- 0
View(bymat)
View(brats)
brats[is.na(brats)] <- 0
bymat <- brats %>% group_by(material) %>% summarise_each(funs(mean),grams)
spices <- join(spices,bymat,by="material")
View(spices)
brats <- read.csv('C:/Users/stephen.p.duffy/Documents/GitHub/New Folder/Brats.csv')
brats$material <- as.character(brats$material)
brats$amount <- as.numeric(brats$amount)
spices <- data.frame(tally(group_by(brats,material),sort = TRUE ))
names(spices) <- c("material","count")
brats$grams <- ifelse(brats[,3] == "tsp", brats$grams <- brats$amount * 4.93,
ifelse(brats[,3] == "tbsp", brats$grams <- brats$amount * 15,
ifelse(brats[,3] == "lbs", brats$grams <- brats$amount * 453.6,
ifelse(brats[,3] == "g", brats$grams <- brats$amount * 1, NA))))
brats[is.na(brats)] <- 0
bymat <- brats %>% group_by(material) %>% summarise_each(funs(mean),grams)
spices <- join(spices,bymat,by="material")
View(spices)
install.packages("caret")
library(kernlab)
library(caret)
brats <- read.csv('C:/Users/stephen.p.duffy/Documents/GitHub/New Folder/Brats.csv')
brats$material <- as.character(brats$material)
brats$amount <- as.numeric(brats$amount)
spices <- data.frame(tally(group_by(brats,material),sort = TRUE ))
names(spices) <- c("material","count")
brats$grams <- ifelse(brats[,3] == "tsp", brats$grams <- brats$amount * 4.93,
ifelse(brats[,3] == "tbsp", brats$grams <- brats$amount * 15,
ifelse(brats[,3] == "lbs", brats$grams <- brats$amount * 453.6,
ifelse(brats[,3] == "g", brats$grams <- brats$amount * 1, NA))))
brats[is.na(brats)] <- 0
bymat <- brats %>% group_by(material) %>% summarise_each(funs(mean),grams)
spices <- join(spices,bymat,by="material")
View(spices)
View(bymat)
library(kernlab)
data(spam)
data("faithful")
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
install.packages("ILSR")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
data("concrete")
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
qplot(CompressiveStrength.,finMod$residuals, colour=race,data=training)
View(testing)
View(training)
qplot(CompressiveStrength ~ .,colour=.,data=concrete)
qplot(CompressiveStrength ~ .,colour=concrete[,1:8],data=concrete)
featurePlot(x=training[,1:8],
y=training$CompressiveStrength,
plot="pairs")
librar(Hmisc)
library(Hmisc)
featurePlot(x=concrete[,1:8],
y=concrete$CompressiveStrength,
plot="pairs")
conc2 <- concrete
summary(conc2$FlyAsh)
conc2$FlyAsh <- cut2(conc2$FlyAsh,c(25,50,75,100,125,150,175,200))
summary(conc2$Age)
conc2$FlyAsh <- cut2(conc2$FlyAsh,c(50,100,150,200,250,300))
conc2$Age <- cut2(conc2$Age,c(50,100,150,200,250,300))
featurePlot(x=conc2[,1:8],
y=conc2$CompressiveStrength,
plot="pairs")
View(conc2)
summary(conc2)
conc2$Water <- cut2(conc2$Water,c(50,100,150,200,250,300))
conc2$BlastFurnaceSlag <- cut2(conc2$BlastFurnaceSlag,c(50,100,150,200,250,300))
conc2$CourseAggregate <- cut2(conc2$CourseAggregate,c(100,200,300,400,500,600,700,800,900))
conc2$CoarseAggregate <- cut2(conc2$CoarseAggregate,c(100,200,300,400,500,600,700,800,900))
conc2$FineAggregate <- cut2(conc2$FineAggregate,c(100,200,300,400,500,600,700,800,900))
conc2$Superplasticizer <- cut2(conc2$Superplasticizer,c(5,10,15,20,25,30))
conc2$Cement <- cut2(conc2$Cement,c(100,200,300,400,500))
featurePlot(x=conc2[,1:8],
y=conc2$CompressiveStrength,
plot="pairs")
featurePlot(x=training[,1:8],
y=training$CompressiveStrength,
plot="pairs")
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index,y=CompressiveStrength)) + geom_point() + theme_bw()
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
View(mixtures)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
featurePlot(x = training[, 1:8], y = cutCS, plot = "box")
hist(training$Superplasticizer)
View(mixtures)
summary(mixtures$Superplasticizer)
summary(cement$Superplasticizer)
summary(concrete$Superplasticizer)
hist(log(mixtures$Superplasticizer))
hist(log10(mixtures$Superplasticizer))
summary(log10(cement$Superplasticizer))
summary(log10(concrete$Superplasticizer))
g <- log10(concrete$Superplasticizer)
plot(g)
hist(g)
summary(g)
g <- log(concrete$Superplasticizer)
plot(g)
hist(g)
g <- log(mixtures$Superplasticizer)
plot(g)
hist(g)
summary(g)
g <- log(mixtures$Superplasticizer+1)
hist(g)
g <- log(training$Superplasticizer)
hist(g)
summary(g)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
match("IL",names(training))
lab <- glob2rx("IL*")
grep(lab,training)
lab <- glob2rx("IL_*")
grep(lab,training)
grep(lab,training,value = TRUE)
grep(lab,names(training))
grep(glob2rx("IL*"),names(training))
cols <- grep(glob2rx("IL*"),names(training))
b <- training[,cols]
View(b)
g <- preProcess(b,thresh = .80)
g
g[1]
g[2]
g[3]
g[4]
g[5]
g[6]
g[7]
g[8]
g[9]
g[10]
g[11]
g[12]
g[13]
g[14]
g <- preProcess(b,method = "pca", thresh = .80)
g[4]
traing <- predict(g,b)
View(traing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
cols <- grep(glob2rx("IL*"),names(training))
b <- training[,c(1,cols)]
View(b)
pred1 <- glm(diagnosis ~ ., data = training)
View(training)
pred1 <- glm(diagnosis ~ ., data = b)
View(b)
b[,2:13] <- as.numeric(b[,2:13])
b[,2] <- as.numeric(b[,2])
b[,3:4] <- as.numeric(b[,3:4])
sapply(b, as.numeric(b))
b[,3] <- as.numeric(b[,3])
b[,4] <- as.numeric(b[,4])
b[,5] <- as.numeric(b[,5])
b[,6] <- as.numeric(b[,6])
b[,7] <- as.numeric(b[,7])
b[,8] <- as.numeric(b[,8])
b[,9] <- as.numeric(b[,9])
b[,10] <- as.numeric(b[,10])
b[,11] <- as.numeric(b[,11])
b[,12] <- as.numeric(b[,12])
b[,13] <- as.numeric(b[,13])
pred1 <- glm(diagnosis ~ ., data = b)
str(b)
b[,1] <- as.character(b[,1])
pred1 <- glm(diagnosis ~ ., data = b)
View(b)
pred1 <- lm(diagnosis ~ ., data = b)
cols <- grep(glob2rx("IL*"),names(training))
b <- training[,c(1,cols)]
b[,3] <- as.numeric(b[,3])
b[,4] <- as.numeric(b[,4])
b[,5] <- as.numeric(b[,5])
b[,6] <- as.numeric(b[,6])
b[,7] <- as.numeric(b[,7])
b[,8] <- as.numeric(b[,8])
b[,9] <- as.numeric(b[,9])
b[,10] <- as.numeric(b[,10])
b[,11] <- as.numeric(b[,11])
b[,12] <- as.numeric(b[,12])
b[,13] <- as.numeric(b[,13])
pred1 <- glm(diagnosis ~ ., data = b)
pred1 <- lm(diagnosis ~ ., data = b)
summary(pred1)
View(b)
str(b)
b[,1] <- as.factor(b[,1])
str(b)
pred1 <- lm(diagnosis ~ ., data = b)
pred1 <- train(diagnosis ~ .,method ="glm", data=b)
install.packages('e1071', dependencies=TRUE)
pred1 <- train(diagnosis ~ .,method ="glm", data=b)
summary(pred1)
C1 <- confusionMatrix(predictions, testing$diagnosis)
C1 <- confusionMatrix(b, pred1$diagnosis)
predictions <- predict(modelFit, newdata = testing)
predictions <- predict(pred1, newdata = b)
C1 <- confusionMatrix(predictions, pred1$diagnosis)
C1 <- confusionMatrix(predictions, b$diagnosis)
c1
C1
A1 <- C1$overall[1]
A1
pred2 <- train(diagnosis ~ .,method ="glm",preProcess = "pca", data=b)
predictions2 <- predict(pred2, newdata = b)
C2 <- confusionMatrix(predictions2, b$diagnosis)
A1 <- C2$overall[1]
A1 <- C1$overall[1]
A2 <- C2$overall[1]
A1;A2
pred2 <- train(diagnosis ~ .,method ="glm",preProcess = "pca", data=b, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predictions2 <- predict(pred2, newdata = b)
C2 <- confusionMatrix(predictions2, b$diagnosis)
A2 <- C2$overall[1]
A1;A2
predictions2 <- predict(pred2, newdata = testing)
C2 <- confusionMatrix(predictions2, testing$diagnosis)
A2 <- C2$overall[1]
pred1 <- train(diagnosis ~ .,method ="glm", data=b)
C1 <- confusionMatrix(predictions, testing$diagnosis)
C1 <- confusionMatrix(pred1, testing$diagnosis)
predictions <- predict(pred1, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
A1 <- C1$overall[1]
A1;A2
cols <- grep(glob2rx("IL*"),names(training))
b <- training[,cols]
g <- preProcess(b,method = "pca", thresh = .90)
traing <- predict(g,b)
traing
View(traing)
install.packages("shiny")
library(shiny)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='sduffy23',
token='DC5D6EC86A388336907FBDCADDF56DFD',
secret='<SECRET>')
rsconnect::setAccountInfo(name='sduffy23',
token='DC5D6EC86A388336907FBDCADDF56DFD',
secret='cMHz35diTbdemBAC1+eYxYdHPDP2T7XmQYqAOHO4')
rsconnect::setAccountInfo(name='sduffy23',
token='DC5D6EC86A388336907FBDCADDF56DFD',
secret='cMHz35diTbdemBAC1+eYxYdHPDP2T7XmQYqAOHO4')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(devtools)
install.packages("devtools")
install.packages("Rtools")
library(devtools)
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages('RCurl')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
library(shiny)
library(shinyapps)
library(devtools)
library(ggplot2)
function(input, output) {
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
output$plot <- renderPlot({
p <- ggplot(dataset(), aes_string(x=input$x, y=input$y)) + geom_point()
if (input$color != 'None')
p <- p + aes_string(color=input$color)
facets <- paste(input$facet_row, '~', input$facet_col)
if (facets != '. ~ .')
p <- p + facet_grid(facets)
if (input$jitter)
p <- p + geom_jitter()
if (input$smooth)
p <- p + geom_smooth()
print(p)
}, height=700)
}
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
runApp()
getwd()
setwd()
setwd("C:/Users/stephen.p.duffy/Documents/Github/DataProducts")
context("UI")
test_that("selectInput options are properly escaped", {
si <- selectInput("quote", "Quote", list(
"\"Separators\"" = list(
"None" = "",
"Double quote" = "\"",
"Single quote" = "'"
)
))
si_str <- as.character(si)
expect_true(any(grepl("<option value=\"&quot;\">", si_str, fixed = TRUE)))
expect_true(any(grepl("<option value=\"&#39;\">", si_str, fixed = TRUE)))
expect_true(any(grepl("<optgroup label=\"&quot;Separators&quot;\">", si_str, fixed = TRUE)))
})
shiny::runApp('~/R/win-library/3.2/shiny/examples/11_timer')
shiny::runApp('~/R/win-library/3.2/shiny/examples/11_timer')
deployApp()
deployApp()
runApp()
shiny::runApp('~/R/win-library/3.2/shiny/examples/11_timer')
library(manipulate)
install.packages('rCharts')
install.packages("lattice")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv/rCharts')
require(devtools)
install_github('ramnathv/rCharts', 'ramnathv')
library(rCharts)
install.packages("C:/Users/stephen.p.duffy/Downloads/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/stephen.p.duffy/Downloads/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/stephen.p.duffy/Downloads/ramnathv-rCharts-2c368c8.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install.packages("~/GitHub/ramnathv-rCharts-2c368c8.zip", repos = NULL, type = "win.binary")
install_github('ramnathv/rCharts')
